name: Publish and Release Fish Common API

on:
  push:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: github

      - name: Auto Increment Version
        id: version
        run: |
          # ‰ªé pom.xml Ëé∑ÂèñÂΩìÂâçÁâàÊú¨
          CURRENT_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          
          # ÁîüÊàêÊñ∞ÁâàÊú¨Âè∑
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          # Êõ¥Êñ∞ pom.xml
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Updated version to $NEW_VERSION"

      - name: Build package
        run: mvn -B clean package -DskipTests

      - name: Archive release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            target/*.jar
            target/*.pom

      - name: Publish to GitHub Packages
        run: mvn -B deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v2
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Fish Common API v${{ steps.version.outputs.new_version }}
          body: |
            ### üêü Fish Common API v${{ steps.version.outputs.new_version }}
            
            This release contains the shared API for Fish plugins.
            
            ### üì¶ Maven
            ```xml
            <dependency>
              <groupId>com.fish</groupId>
              <artifactId>fish-common-api</artifactId>
              <version>${{ steps.version.outputs.new_version }}</version>
            </dependency>
            ```
            
            ### üêò Gradle
            ```gradle
            repositories {
                maven {
                    name = 'GitHubPackages'
                    url = 'https://maven.pkg.github.com/${{ github.repository }}'
                    credentials {
                        username = project.findProperty('gpr.user') ?: System.getenv('GPR_USER')
                        password = project.findProperty('gpr.key') ?: System.getenv('GPR_API_KEY')
                    }
                }
            }
            
            dependencies {
                implementation 'com.fish:fish-common-api:${{ steps.version.outputs.new_version }}'
            }
            ```
            
            ### üîë Authentication
            Add to `~/.gradle/gradle.properties`:
            ```
            gpr.user=<your-github-username>
            gpr.key=<your-github-token>
            ```
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v2
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/fish-common-api-${{ steps.version.outputs.new_version }}.jar
          asset_name: fish-common-api-${{ steps.version.outputs.new_version }}.jar
          asset_content_type: application/java-archive

      - name: Upload Source JAR
        uses: actions/upload-release-asset@v2
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/fish-common-api-${{ steps.version.outputs.new_version }}-sources.jar
          asset_name: fish-common-api-${{ steps.version.outputs.new_version }}-sources.jar
          asset_content_type: application/java-archive

      - name: Upload Javadoc JAR
        uses: actions/upload-release-asset@v2
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/fish-common-api-${{ steps.version.outputs.new_version }}-javadoc.jar
          asset_name: fish-common-api-${{ steps.version.outputs.new_version }}-javadoc.jar
          asset_content_type: application/java-archive